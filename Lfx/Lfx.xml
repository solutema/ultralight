<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lfx</name>
    </assembly>
    <members>
        <member name="P:Lfx.Data.DataBaseCache.TableList">
            <summary>
            Obtiene una lista de tablas actualmente presente en la base de datos (puede no coincidir con dbstruct.xml)
            </summary>
        </member>
        <member name="P:Lfx.Data.DataBaseCache.Constraints">
            <summary>
            Obtiene las claves foráneas desde dbstruct.xml (puede no coincidir con el contenido actual de la base de datos)
            </summary>
        </member>
        <member name="P:Lfx.Data.DataBaseCache.TableStructures">
            <summary>
            Obtiene las estructuras de las tablas desde dbstruct.xml (puede no coincidir con el contenido actual de la base de datos)
            </summary>
        </member>
        <member name="T:Lfx.Data.Providers.Npgsql">
            <summary>
            Proveedor compatible con Npgsql versión 2. Requiere la presencia de Npgsql.dll en el directorio del programa.
            </summary>
        </member>
        <member name="T:Lfx.Data.Providers.Provider">
            <summary>
            Representa un proveedor ADO.NET, el cual se carga en tiempo de ejecución a través de System.Reflection para no
            agregar dependencias en tiempo de diseño. La única dependencia en tiempo de diseño es System.Data.Odbc.
            </summary>
        </member>
        <member name="T:Lfx.Data.DataBase">
            <summary>
            Proporciona una conexión a la base de datos y acceso de bajo nivel (sin abstracción) a los datos. Se utiliza normalmente para ejecutar consultas.
            Vea Lws.Data.DataView para acceso de medio nivel a los datos o Lbl.* para para acceso de alto nivel a los datos.
            </summary>
        </member>
        <member name="M:Lfx.Data.DataBase.GetFieldName(System.String)">
            <summary>
            Toma "tabla.campo" y devulve "campo"
            </summary>
        </member>
        <member name="T:Lfx.Data.Forms.Connecting">
            <summary>
            Descripción breve de Connecting.
            </summary>
        </member>
        <member name="F:Lfx.Data.Forms.Connecting.components">
            <summary>
            Variable del diseñador requerida.
            </summary>
        </member>
        <member name="M:Lfx.Data.Forms.Connecting.Dispose(System.Boolean)">
            <summary>
            Limpiar los recursos que se estén utilizando.
            </summary>
        </member>
        <member name="M:Lfx.Data.Forms.Connecting.InitializeComponent">
            <summary>
            Método necesario para admitir el Diseñador. No se puede modificar
            el contenido del método con el editor de código.
            </summary>
        </member>
        <member name="T:Lfx.Data.Forms.LostConnection">
            <summary>
            Descripción breve de LostConnection.
            </summary>
        </member>
        <member name="F:Lfx.Data.Forms.LostConnection.components">
            <summary>
            Variable del diseñador requerida.
            </summary>
        </member>
        <member name="M:Lfx.Data.Forms.LostConnection.Dispose(System.Boolean)">
            <summary>
            Limpiar los recursos que se estén utilizando.
            </summary>
        </member>
        <member name="M:Lfx.Data.Forms.LostConnection.InitializeComponent">
            <summary>
            Método necesario para admitir el Diseñador. No se puede modificar
            el contenido del método con el editor de código.
            </summary>
        </member>
        <member name="T:Lfx.Data.SqlCommandBuilder">
            <summary>
            Esta clase y sus derivadas se utilizan para evitar escribir los comandos SQL como literales de texto.
            Permite la creación de un objeto y asignación de propiedades que luego puede convertirse para su ejecución
            en texto SQL (mediante el método ToString()) o en un OdbcCommand (mediante el método ToOdbcCommand()).
            Se utilizan principalmente con dos objetivos:
              1.- Solucionar problemas de léxico SQL.
              2.- Agregar extensibilidad al acceso a datos. Así como hoy se implementa ToOdbcCommand() para acceso mediante ODBC, luego se
                  pueden implementar otros métodos para acceso mediante otros adaptadores (p. ej. MySQL Connector/Net).
            </summary>
        </member>
        <member name="T:Lfx.Environment.Folders">
            <summary>
            Summary description for Folders.
            </summary>
        </member>
        <member name="T:Lfx.Environment.Shell">
            <summary>
            Provee acceso al shell.
            </summary>
        </member>
        <member name="T:Lfx.Environment.SystemInformation">
            <summary>
            Provee información sobre el sistema
            </summary>
        </member>
        <member name="T:Lfx.Properties.Resources">
            <summary>
              Clase de recurso con establecimiento inflexible de tipos, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:Lfx.Properties.Resources.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:Lfx.Properties.Resources.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso con establecimiento inflexible de tipos.
            </summary>
        </member>
        <member name="T:Lfx.Sound">
            <summary>
            Descripción breve de Sound.
            </summary>
        </member>
        <member name="M:Lfx.Types.Parsing.ParseSqlDateTime(System.String)">
            <summary>
            Interpreta un valor de fecha en varios formatos diferentes.
            </summary>
        </member>
        <member name="M:Lfx.Types.Parsing.ParseDate(System.String)">
            <summary>
            Interpreta un valor de fecha en varios formatos diferentes. Devuelve null para cadenas vacías o fechas inválidas.
            </summary>
        </member>
        <member name="M:Lfx.Types.Parsing.ParseDouble(System.String)">
            <summary>
            Interpreta un valor de punto flotante. Devuelve cero para cualquier valor desconocido.
            </summary>
        </member>
        <member name="M:Lfx.Types.Parsing.ParseStock(System.String)">
            <summary>
            Interpreta una cantidad de stock (actualmente un double). Devuelve cero para cualquier valor desconocido.
            </summary>
        </member>
        <member name="M:Lfx.Types.Parsing.ParseCurrency(System.String)">
            <summary>
            Interpreta un valor monetario (actualemente un double). Devuelve cero para cualquier valor desconocido.
            </summary>
        </member>
        <member name="M:Lfx.Types.Parsing.ParseBool(System.String)">
            <summary>
            Interpreta un valor booleano. Devuelve falso para cualquier valor desconocido.
            </summary>
        </member>
        <member name="M:Lfx.Types.Parsing.ParseInt(System.String)">
            <summary>
            Interpreta un valor entero. Devuelve cero para cualquier valor desconocido.
            </summary>
        </member>
        <member name="M:Lfx.Types.Strings.Collection2CSV(System.Collections.ArrayList,System.String)">
            <summary>
            Convierte una matriz de cadenas en una cadena conteniendo todos los elementos separados por comas (u otro separador)
            </summary>
        </member>
        <member name="M:Lfx.Types.Strings.Ints2CSV(System.Int32[],System.String)">
            <summary>
            Convierte una matriz de enteros en una cadena conteniendo todos los elementos separados por comas (u otro separador)
            </summary>
        </member>
        <member name="M:Lfx.Types.Strings.StrReverse(System.String)">
            <summary>
            Invierte una cadena, caracter por caracter
            </summary>
        </member>
        <member name="T:Lfx.Types.ControlChars">
            <summary>
            Clases referentes al manejo de tipos.
            </summary>
        </member>
        <member name="T:Lfx.Data.Providers.MySql">
            <summary>
            Proveedor compatible con MySql Connector/NET versión 6. Requiere la presencia de MySql.Data.dll en el directorio del programa.
            </summary>
        </member>
        <member name="T:Lfx.Data.Providers.Odbc">
            <summary>
            Proveedor compatible ODBC. Este es el único proveedor que está enlazado estáticamente y no trabaja por reflexión.
            </summary>
        </member>
    </members>
</doc>
